// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/entities/exams/discipline_entity.dart';
import 'domain/entities/exams/exam_entity.dart';
import 'domain/entities/exams/language_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8462608400158232643),
      name: 'DisciplineEntity',
      lastPropertyId: const obx_int.IdUid(4, 7564810800128097279),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5808690979409431982),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1536686690704919530),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7257447057233280429),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7564810800128097279),
            name: 'examId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7827401758183774208),
            relationTarget: 'ExamEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1545628167696847384),
      name: 'LanguageEntity',
      lastPropertyId: const obx_int.IdUid(4, 3076998266515991595),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2278057302491639463),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8659267949197269660),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8814301094409959642),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3076998266515991595),
            name: 'examId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7817492634972837897),
            relationTarget: 'ExamEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5675268360909691202),
      name: 'ExamEntity',
      lastPropertyId: const obx_int.IdUid(3, 7267168754332214624),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 993458192260934699),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3527102613119800287),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7267168754332214624),
            name: 'year',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'disciplines', srcEntity: 'DisciplineEntity', srcField: ''),
        obx_int.ModelBacklink(
            name: 'languages', srcEntity: 'LanguageEntity', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 5675268360909691202),
      lastIndexId: const obx_int.IdUid(2, 7817492634972837897),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DisciplineEntity: obx_int.EntityDefinition<DisciplineEntity>(
        model: _entities[0],
        toOneRelations: (DisciplineEntity object) => [object.exam],
        toManyRelations: (DisciplineEntity object) => {},
        getId: (DisciplineEntity object) => object.id,
        setId: (DisciplineEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DisciplineEntity object, fb.Builder fbb) {
          final labelOffset = fbb.writeString(object.label);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, labelOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addInt64(3, object.exam.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = DisciplineEntity(
              id: idParam, label: labelParam, value: valueParam);
          object.exam.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.exam.attach(store);
          return object;
        }),
    LanguageEntity: obx_int.EntityDefinition<LanguageEntity>(
        model: _entities[1],
        toOneRelations: (LanguageEntity object) => [object.exam],
        toManyRelations: (LanguageEntity object) => {},
        getId: (LanguageEntity object) => object.id,
        setId: (LanguageEntity object, int id) {
          object.id = id;
        },
        objectToFB: (LanguageEntity object, fb.Builder fbb) {
          final labelOffset = fbb.writeString(object.label);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, labelOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addInt64(3, object.exam.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              LanguageEntity(id: idParam, label: labelParam, value: valueParam);
          object.exam.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.exam.attach(store);
          return object;
        }),
    ExamEntity: obx_int.EntityDefinition<ExamEntity>(
        model: _entities[2],
        toOneRelations: (ExamEntity object) => [],
        toManyRelations: (ExamEntity object) => {
              obx_int.RelInfo<DisciplineEntity>.toOneBacklink(4, object.id,
                      (DisciplineEntity srcObject) => srcObject.exam):
                  object.disciplines,
              obx_int.RelInfo<LanguageEntity>.toOneBacklink(4, object.id,
                      (LanguageEntity srcObject) => srcObject.exam):
                  object.languages
            },
        getId: (ExamEntity object) => object.id,
        setId: (ExamEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ExamEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.year);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final yearParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              ExamEntity(id: idParam, title: titleParam, year: yearParam);
          obx_int.InternalToManyAccess.setRelInfo<ExamEntity>(
              object.disciplines,
              store,
              obx_int.RelInfo<DisciplineEntity>.toOneBacklink(4, object.id,
                  (DisciplineEntity srcObject) => srcObject.exam));
          obx_int.InternalToManyAccess.setRelInfo<ExamEntity>(
              object.languages,
              store,
              obx_int.RelInfo<LanguageEntity>.toOneBacklink(
                  4, object.id, (LanguageEntity srcObject) => srcObject.exam));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DisciplineEntity] entity fields to define ObjectBox queries.
class DisciplineEntity_ {
  /// See [DisciplineEntity.id].
  static final id =
      obx.QueryIntegerProperty<DisciplineEntity>(_entities[0].properties[0]);

  /// See [DisciplineEntity.label].
  static final label =
      obx.QueryStringProperty<DisciplineEntity>(_entities[0].properties[1]);

  /// See [DisciplineEntity.value].
  static final value =
      obx.QueryStringProperty<DisciplineEntity>(_entities[0].properties[2]);

  /// See [DisciplineEntity.exam].
  static final exam = obx.QueryRelationToOne<DisciplineEntity, ExamEntity>(
      _entities[0].properties[3]);
}

/// [LanguageEntity] entity fields to define ObjectBox queries.
class LanguageEntity_ {
  /// See [LanguageEntity.id].
  static final id =
      obx.QueryIntegerProperty<LanguageEntity>(_entities[1].properties[0]);

  /// See [LanguageEntity.label].
  static final label =
      obx.QueryStringProperty<LanguageEntity>(_entities[1].properties[1]);

  /// See [LanguageEntity.value].
  static final value =
      obx.QueryStringProperty<LanguageEntity>(_entities[1].properties[2]);

  /// See [LanguageEntity.exam].
  static final exam = obx.QueryRelationToOne<LanguageEntity, ExamEntity>(
      _entities[1].properties[3]);
}

/// [ExamEntity] entity fields to define ObjectBox queries.
class ExamEntity_ {
  /// See [ExamEntity.id].
  static final id =
      obx.QueryIntegerProperty<ExamEntity>(_entities[2].properties[0]);

  /// See [ExamEntity.title].
  static final title =
      obx.QueryStringProperty<ExamEntity>(_entities[2].properties[1]);

  /// See [ExamEntity.year].
  static final year =
      obx.QueryIntegerProperty<ExamEntity>(_entities[2].properties[2]);

  /// see [ExamEntity.disciplines]
  static final disciplines =
      obx.QueryBacklinkToMany<DisciplineEntity, ExamEntity>(
          DisciplineEntity_.exam);

  /// see [ExamEntity.languages]
  static final languages =
      obx.QueryBacklinkToMany<LanguageEntity, ExamEntity>(LanguageEntity_.exam);
}
